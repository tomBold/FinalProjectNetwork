//============================================================================
// Name        : TCPp2pMessenger.h
// Author      : Eliav Menachi
// Version     :
// Copyright   : Your copyright notice
// Description : TCP p2p Messenger application
//============================================================================

#include <pthread.h>
#include "TCPSocket.h"
#include "TCPp2pMessenger.h"

using namespace std;

/****** class TCPp2pServerReceiver implementation ******/

/**
 * class TCPp2pServerReceiver implementation
 */
TCPp2pServer::TCPp2pServer(int port):socket(port){
	running = false;
	start();
}
/**
 * This method constantly reads incoming messages from the server socket and print them on to the console
 */
void TCPp2pServer::run(){
	running = true;
	while(running){
		TCPSocket peerSock = socket->listenAndAccept();
		bool rc;
		do{
			rc = readFromSocket(peerSock);
		}while(rc);
		parent->tcpPeerSocket = NULL;
	}
	cout<<"closing server receiver thread"<<endl;
}

/****** class TCPp2pClientReceiver implementation ******/

TCPp2pClientReceiver::TCPp2pClientReceiver(TCPp2pMessenger* p){
	parent = p;
}
/**
 * This method constantly reads incoming messages from the client socket and print them on to the console
 */
void TCPp2pClientReceiver::run(){
	parent->readFromSocket(parent->tcpClientSocket);
	cout<<"closing client reader thread"<<endl;
}


/****** class TCPp2pMessenger implementation ******/

/**
 * This method constantly reads incoming messages from the given socket and print them on to the console
 */
void TCPp2pMessenger::readFromSocket(TCPSocket* socket){
	char buff[1500];
	while (true){
		int msgLen;
		socket->recv((char*)&msgLen,4);
		msgLen = ntohl(msgLen);
		int totalrc = 0;
		int rc;
		while (totalrc < msgLen){
			rc = socket->recv((char*)&buff[totalrc],msgLen-totalrc);
			if (rc>0){
				totalrc += rc;
			}else{
				break;
			}
		}
		if (rc > 0 && totalrc == msgLen){
			buff[msgLen] = 0;
			cout<<"\nreceive msg from:"<<socket->fromAddr()<<endl<<">\""<<buff<<"\""<<endl;
		}else{
			socket->cclose();
			break;
		}
	}
}

/**
 * Construct a TCP server socket, opens a thread that receive all incoming connection
 */
TCPp2pMessenger::TCPp2pMessenger(){
	running = true;
	tcpClientSocket = 0;
	tcpServerSocket = new TCPSocket(MSNGR_PORT);
	serverReceiver = new TCPp2pServerReceiver(this);
	serverReceiver->start();
	clientReceiver = NULL;
	tcpPeerSocket = NULL;
}

/**
 * Open a connection to the given IP address and once the connection is established it will open a thread
 * to read incoming messages from the socket
 */
bool TCPp2pMessenger::open(string peerIp){
	if (tcpClientSocket != NULL){
		cout<<"closing old client socket"<<endl;
		tcpClientSocket->cclose();
		clientReceiver->waitForThread();
		delete clientReceiver;
	}
	tcpClientSocket = new TCPSocket(peerIp, MSNGR_PORT);
	if (tcpClientSocket != NULL){
		clientReceiver = new TCPp2pClientReceiver(this);
		clientReceiver->start();
		return true;
	}
	return false;
}

/**
 * send a message on the client open connection
 * The message is sent in the form: [message length - 4 bytes][message data]
 */
void TCPp2pMessenger::send(string msg){
	int msgLen = htonl(msg.length());
	tcpClientSocket->send((char*)&msgLen,4);
	tcpClientSocket->send(msg.data(),msg.length());
}

/**
 * send a message on the server socket incomming connection
 * The message is sent in the form: [message length - 4 bytes][message data]
 */
void TCPp2pMessenger::reply(string msg){
	int msgLen = htonl(msg.length());
	tcpPeerSocket->send((char*)&msgLen,4);
	tcpPeerSocket->send(msg.data(),msg.length());
}

/**
 * close all resources / sockets
 */
void TCPp2pMessenger::close(){
	running = false;
	if (tcpPeerSocket != NULL){
		tcpPeerSocket->cclose();
	}
	if (tcpClientSocket != NULL){
		tcpClientSocket->cclose();
		clientReceiver->waitForThread();
		delete tcpClientSocket;
		delete clientReceiver;
	}
	tcpServerSocket->cclose();
	serverReceiver->waitForThread();
	delete serverReceiver;
	delete tcpServerSocket;
}

/**
 * return  true if the client socket is connected
 */
bool TCPp2pMessenger::isActiveClientSession(){
	return (tcpClientSocket != NULL);
}

/**
 * return true if there is an open incoming connection
 */
bool TCPp2pMessenger::isActivePeerSession(){
	return (tcpPeerSocket != NULL);
}

