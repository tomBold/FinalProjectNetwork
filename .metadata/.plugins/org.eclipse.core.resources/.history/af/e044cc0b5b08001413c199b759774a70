
#include "TCPMessengerServer.h"
#include "TCPMessengerProtocol.h"


TCPSessionBroker::	TCPSessionBroker(TCPMessengerServer* mesgr, TCPSocket* p1,TCPSocket* p2){
	if (p2 == NULL) cout<<"create new test broker with: "<<p1->destIpAndPort()<<endl;
	else cout<<"create new broker between: "<<p1->destIpAndPort()<<" and "<<p2->destIpAndPort()<<endl;
	messenger = mesgr;
	peer1 = p1;
	peer2 = p2;
}

void TCPSessionBroker::run(){
	if (peer2 != NULL){
		cout<<"Broker thread started"<<endl;
		MultipleTCPSocketsListener msp;
		msp.addSocket(peer1);
		msp.addSocket(peer2);
		bool flag = true;
		while(flag){
			TCPSocket* sender = msp.listenToSocket();
			if (sender == NULL) break;
			TCPSocket* receiver = peer1;
			if (receiver == sender) receiver = peer2;
			int command = messenger->readCommandFromPeer(sender);
			string msg;
			switch (command){
			case SEND_MSG_TO_PEER:
				cout<<"sending msg:"<<sender->destIpAndPort()<<" -> "<<receiver->destIpAndPort()<<" "<<msg<<endl;
				msg =  messenger->readDataFromPeer(sender);
				messenger->sendCommandToPeer(receiver,SEND_MSG_TO_PEER);
				messenger->sendDataToPeer(receiver,msg);
				break;
			case CLOSE_SESSION_WITH_PEER:
				cout<<"closing session:"<<sender->destIpAndPort()<<" -> "<<receiver->destIpAndPort()<<endl;
				messenger->sendCommandToPeer(receiver,CLOSE_SESSION_WITH_PEER);
				messenger->markPeerAsAvailable(sender);
				messenger->markPeerAsAvailable(receiver);
				flag = false;
				break;
			}
		}
		cout<<"closing broker:"<<peer1->destIpAndPort()<<"-"<<peer2->destIpAndPort()<<endl;
	}else{
		bool flag = true;
		while(flag){
			int command = messenger->readCommandFromPeer(peer1);
			string msg;
			switch (command){
			case SEND_MSG_TO_PEER:
				cout<<"sending msg:"<<peer1->destIpAndPort()<<" -> "<<peer1->destIpAndPort()<<" "<<msg<<endl;
				msg =  messenger->readDataFromPeer(peer1);
				messenger->sendCommandToPeer(peer1,SEND_MSG_TO_PEER);
				messenger->sendDataToPeer(peer1,msg);
				break;
			case CLOSE_SESSION_WITH_PEER:
				cout<<"closing session:"<<peer1->destIpAndPort()<<" -> "<<peer1->destIpAndPort()<<endl;
				messenger->markPeerAsAvailable(peer1);
				flag = false;
				break;
			}
		}
		cout<<"closing test broker:"<<peer1->destIpAndPort()<<endl;
	}
	delete this;
}

PeersRequestsDispatcher::PeersRequestsDispatcher(TCPMessengerServer* mesgr){
	messenger = mesgr;
}


void PeersRequestsDispatcher::run(){
	cout<<"dispatcher started"<<endl;
	while (messenger->running){
		MultipleTCPSocketsListener msp;
		//while(messenger->getPeersVec().size() == 0) sleep(1);
		msp.addSockets(messenger->getPeersVec());
		TCPSocket* readyPeer = msp.listenToSocket(2);
		if(readyPeer == NULL) continue;
		int command = messenger->readCommandFromPeer(readyPeer);
		string peerName;
		TCPSocket* scondPeer;
		switch (command){
		case OPEN_SESSION_WITH_PEER:
			peerName = messenger->readDataFromPeer(readyPeer);
			cout<<"got open session command:"<<readyPeer->destIpAndPort()<<"->"<< peerName<<endl;
			if(peerName == TEST_PEER_NAME){ // test session
				cout<<"open test session"<<endl;
				messenger->sendCommandToPeer(readyPeer, SESSION_ESTABLISHED);
				messenger->markPeerAsUnavailable(readyPeer);
				TCPSessionBroker* broker = new TCPSessionBroker(messenger,readyPeer,NULL);
				broker->start();
			}else{
				scondPeer = messenger->getAvailablePeerByName(peerName);
				if (scondPeer!=NULL){
					messenger->sendCommandToPeer(readyPeer, SESSION_ESTABLISHED);
					messenger->sendCommandToPeer(scondPeer, OPEN_SESSION_WITH_PEER);
					messenger->sendDataToPeer(scondPeer, readyPeer->destIpAndPort());
					messenger->markPeerAsUnavailable(scondPeer);
					messenger->markPeerAsUnavailable(readyPeer);
					TCPSessionBroker* broker = new TCPSessionBroker(messenger,readyPeer,scondPeer);
					broker->start();
				}else{
					cout<<"FAIL: didnt find peer:"<<peerName<<endl;
					messenger->sendCommandToPeer(readyPeer, SESSION_REFUSED);
				}
			}
			break;
		default:
			cout<<"peer disconnected: "<<readyPeer->destIpAndPort()<<endl;
			messenger->peerDisconnect(readyPeer);
			break;
		}
	}
	cout<<"dispatcher ended"<<endl;
}




/**
 * Construct a TCP server socket
 */
TCPMessengerServer::TCPMessengerServer(){
	tcpServerSocket = new TCPSocket(MSNGR_PORT);
	running = false;
	dispatcher = NULL;
}

void TCPMessengerServer::run(){
	running = true;
	dispatcher = new PeersRequestsDispatcher(this);
	dispatcher->start();
	while(running){
		TCPSocket* peerSocket = tcpServerSocket->listenAndAccept();
		//TODO: check if the client not already has a socket
		if (peerSocket!= NULL){
			cout<<"new peer connected: "<<peerSocket->destIpAndPort()<<endl;
			openedPeers[peerSocket->destIpAndPort()] = peerSocket;
		}
	}
}

void TCPMessengerServer::listPeers(){
	tOpenedPeers::iterator iter = openedPeers.begin();
	tOpenedPeers::iterator endIter = openedPeers.end();
	for(;iter != endIter;iter++){
		cout<<(*iter).second->destIpAndPort()<<endl;
	}
}

void TCPMessengerServer::close(){
	cout<<"closing server"<< endl;
	running = false;
	tcpServerSocket->cclose();
	tOpenedPeers::iterator iter = openedPeers.begin();
	tOpenedPeers::iterator endIter = openedPeers.end();
	for(;iter != endIter;iter++){
		((*iter).second)->cclose();
	}
	dispatcher->waitForThread();
	iter = openedPeers.begin();
	endIter = openedPeers.end();
	for(;iter != endIter;iter++){
		delete (*iter).second;
	}
	cout<<"server closed"<< endl;
}

vector<TCPSocket*> TCPMessengerServer::getPeersVec(){
	vector<TCPSocket*> vec;
	tOpenedPeers::iterator iter = openedPeers.begin();
	tOpenedPeers::iterator endIter = openedPeers.end();
	for(;iter != endIter;iter++){
		vec.push_back((*iter).second);
	}
	return vec;
}

TCPSocket* TCPMessengerServer::getAvailablePeerByName(string peerName){
	tOpenedPeers::iterator iter = openedPeers.find(peerName);
	tOpenedPeers::iterator endIter = openedPeers.end();
	if (iter == endIter){
		return NULL;
	}
	return (*iter).second;
}

void TCPMessengerServer::peerDisconnect(TCPSocket* peer){
	openedPeers.erase(peer->destIpAndPort());
	busyPeers.erase(peer->destIpAndPort());
	peer->cclose();
	delete peer;
}

void TCPMessengerServer::markPeerAsUnavailable(TCPSocket* peer){
	openedPeers.erase(peer->destIpAndPort());
	busyPeers[peer->destIpAndPort()] = peer;
}

void TCPMessengerServer::markPeerAsAvailable(TCPSocket* peer){
	busyPeers.erase(peer->destIpAndPort());
	openedPeers[peer->destIpAndPort()] = peer;
}

int TCPMessengerServer::readCommandFromPeer(TCPSocket* peer){
	int command = 0;
	int rt = peer->recv((char*)&command,4);
	if (rt < 1) return rt;
	command = ntohl(command);
	return command;
}

string TCPMessengerServer::readDataFromPeer(TCPSocket* peer){
	string msg;
	char buff[1500];
	int msgLen;
	peer->recv((char*)&msgLen,4);
	msgLen = ntohl(msgLen);
	int totalrc = 0;
	int rc;
	while (totalrc < msgLen){
		rc = peer->recv((char*)&buff[totalrc],msgLen-totalrc);
		if (rc>0){
			totalrc += rc;
		}else{
			break;
		}
	}
	if (rc > 0 && totalrc == msgLen){
		buff[msgLen] = 0;
		msg = buff;
	}else{
		peer->cclose();
	}
	return msg;
}

void TCPMessengerServer::sendCommandToPeer(TCPSocket* peer, int command){
	command = htonl(command);
	peer->send((char*)&command,4);
}

void TCPMessengerServer::sendDataToPeer(TCPSocket* peer, string msg){
	int msgLen = msg.length();
	msgLen = htonl(msgLen);
	peer->send((char*)&msgLen,4);
	peer->send(msg.data(),msg.length());
}
